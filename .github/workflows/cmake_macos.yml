name: cmake-macos

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest
    strategy:
      matrix:
        build-type: [ Release ]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake $GITHUB_WORKSPACE/Team03/Code03/ -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build-type}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build-type}}

      - name: Unit Test
        run: ${{github.workspace}}/build/src/unit_testing/unit_testing

      - name: Integration Test
        run: ${{github.workspace}}/build/src/integration_testing/integration_testing

      - name: Automated Autotester Test
        run: python ${{github.workspace}}/autoautotester.py --autotester_path ${{github.workspace}}/build/src/autotester/autotester --test_dir ${{github.workspace}}/Team03/Tests03 --os mac
